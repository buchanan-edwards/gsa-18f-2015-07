{
  "name": "really-need",
  "description": "Node require wrapper with options for cache busting, pre- and post-processing",
  "version": "1.6.3",
  "author": {
    "name": "Gleb Bahmutov",
    "email": "gleb.bahmutov@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/bahmutov/really-need/issues"
  },
  "contributors": [],
  "dependencies": {
    "check-more-types": "1.5.0",
    "check-types": "1.4.0",
    "lazy-ass": "0.5.4"
  },
  "devDependencies": {
    "eslint-rules": "0.4.3",
    "grunt": "0.4.5",
    "grunt-contrib-jshint": "0.11.2",
    "grunt-deps-ok": "0.7.1",
    "grunt-eslint": "12.0.0",
    "grunt-jscs": "1.8.0",
    "grunt-mocha-test": "0.12.7",
    "grunt-nice-package": "0.9.2",
    "grunt-readme": "0.4.5",
    "jshint-summary": "0.4.0",
    "matchdep": "0.3.0",
    "mocha": "2.2.4",
    "pre-git": "0.2.1",
    "quote": "0.4.0",
    "time-grunt": "1.1.1"
  },
  "engines": {
    "node": "> 0.10.*"
  },
  "homepage": "https://github.com/bahmutov/really-need",
  "keywords": [
    "node",
    "npm",
    "require",
    "module",
    "load",
    "loader",
    "commonjs",
    "wrapper"
  ],
  "license": "MIT",
  "main": "index.js",
  "pre-commit": [
    "npm test",
    "npm run test-spy",
    "npm version"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/bahmutov/really-need.git"
  },
  "scripts": {
    "test": "grunt && npm run basic-tests && npm run cache-tests && npm run extra-tests",
    "basic-tests": "npm run test-simple && npm run test-random && npm run test-nested",
    "cache-tests": "node test/busting-cache.js",
    "extra-tests": "npm run test-pre && npm run test-post && npm run test-path && npm run test-args",
    "test-simple": "node test/simple.js",
    "test-random": "node test/new-random-every-time.js",
    "test-nested": "node test/nested-a.js",
    "test-pre": "node test/pre-test.js",
    "test-post": "node test/post-test.js",
    "test-path": "node test/path-test.js",
    "test-args": "node test/load-arguments.js",
    "test-spy": "node test/spy-on-module/spy-on-foo.js"
  },
  "readme": "# really-need v1.6.3\n\n> Node require wrapper with options for cache busting, pre- and post-processing\n\n[![NPM][really-need-icon] ][really-need-url]\n\n[![Build status][really-need-ci-image] ][really-need-ci-url]\n[![dependencies][really-need-dependencies-image] ][really-need-dependencies-url]\n[![devdependencies][really-need-devdependencies-image] ][really-need-devdependencies-url]\n\n[really-need-icon]: https://nodei.co/npm/really-need.png?downloads=true\n[really-need-url]: https://npmjs.org/package/really-need\n[really-need-ci-image]: https://travis-ci.org/bahmutov/really-need.png?branch=master\n[really-need-ci-url]: https://travis-ci.org/bahmutov/really-need\n[really-need-dependencies-image]: https://david-dm.org/bahmutov/really-need.png\n[really-need-dependencies-url]: https://david-dm.org/bahmutov/really-need\n[really-need-devdependencies-image]: https://david-dm.org/bahmutov/really-need/dev-status.png\n[really-need-devdependencies-url]: https://david-dm.org/bahmutov/really-need#info=devDependencies\n\n\nFirst call to `require('really-need')` replaced `Module.prototype.require` with a better version.\nOther modules can use new `require` directly. The module making the call to `really-need` needs\nto use the returned value.\n\n```js\nrequire = require('really-need');\n// global require is now a better one!\n// evaluate foo.js again, busting the cache\nvar foo = require('./foo', {\n    // remove previously loaded foo module\n    bustCache: true,\n    // remove from cache AFTER loading\n    keep: false,\n    pre: function (source, filename) {\n        // transform the source before compiling it\n        return source;\n    },\n    post: function (exported, filename) {\n        // transform the exported object / value from the file\n        return exported;\n    },\n    // inject additional values into foo.js\n    args: {\n        a: 10,\n        b: 5,\n        __dirname: '/some/path'\n    }\n});\n```\n\n\n### API\n\nThe `require` function provided by `really-need` takes a second argument: an options object. \n\n#### bust\n\nRemoves the previously cached module before loading. \nEquivalent to loading and compiling the JavaScript again.\nAlias *bustCache*, default `false`.\n\n#### keep\n\nDeletes loaded instance from the cache after loading to make sure the next `require` call loads\nit again. Alias *cache*, default `false`.\n\n#### pre\n\nGives you a chance to transform the loaded source before compiling it. Can be used to instrument the loaded code,\ncompile other languages into JavaScript, etc. See the related project [node-hook][node-hook] and\nread [Hooking into Node loader for fun and profit][hooking].\n\n```js\n// foo.js\nmodule.exports = function() { return 'foo'; };\n// index.js\nrequire = require('really-need');\nrequire('./foo', { \n    pre: function (source, filename) {\n        return 'console.log(\"loading ' + filename + '\");\\n' + source;\n    }\n});\n// loading /path/to/foo.js\n```\n\n[node-hook]: https://github.com/bahmutov/node-hook\n[hooking]: http://glebbahmutov.com/blog/hooking-into-node-loader-for-fun-and-profit/\n\n#### post\n\nFunction to transform the module's exported value. For example, you can replace the exported function with\nanother one on the fly.\n\n```js\n// foo.js\nmodule.exports = function() { return 'foo'; };\n// index.js\nrequire = require('really-need');\nvar foo = require('./foo', { \n    post: function (exported, filename) {\n        return function () { return 'bar'; }\n    }\n});\nconsole.log(foo()); // \"bar\"\n```\n\n#### args\n\nYou can inject variables into the loaded module source. These variables will be declared at the top\nof the module.\n\n```js\nrequire('./foo', {\n    args: {\n        a: 10,\n        b: 20\n    }\n});\n// foo.js will have var a = 10, b = 20; at the top.\n```\n\nEach value will stringified to JSON, functions will be copied as a string.\n\n#### verbose\n\nPrint debug messages while loading. Alias *debug*, default `false`.\n\n\n## Use\n\n### Load a different module\n\nI love [defensive programming][paranoid] and write a lot of assertions when programming.\nMy favorite predicate and type checking library is [check-types][check-types]. It was missing\na few checks we needed, so we wrote and open sourced a library [check-more-types][check-more-types].\nTypically, one needs to require `check-more-type` in any place where `check-types` is used to get\nour library. This means a lot of code editions to make. \n\nWe can use `really-need` to load `check-more-types` instead of `check-types`. Just include\nthis code in the beginning of the application to place `check-more-types` in the cache.\n\n```js\nrequire = require('really-need');\nrequire('check-types', {\n  post: function () {\n    return require('check-more-types');\n  }\n});\n// any code later will get check-more-type\nvar check = require('check-types');\nconsole.log('check.bit(1) =', check.bit(1));\n// check.bit(1) = true\n```\n\n[paranoid]: http://glebbahmutov.com/blog/paranoid-coding/\n[check-types]: https://github.com/philbooth/check-types.js\n[check-more-types]: https://github.com/kensho/check-more-types\n\n### Instrument code on load\n\nOne can instrument the loaded JavaScript file to collect the code coverage information. \nI am using the excellent [istanbul][istanbul] library in the example below.\n\n```js\nvar istanbul = require('istanbul');\nvar instrumenter = new istanbul.Instrumenter();\nvar instrument = instrumenter.instrumentSync.bind(instrumenter);\nrequire = require('really-need');\nvar foo = require('./foo', {\n  bust: true, // make sure to load foo.js again\n  pre: instrument // signatures for post and instrument match exactly\n});\nconsole.log(foo());\nconsole.log(foo());\nconsole.log(foo());\n// how many times did foo run?\nvar fooFilename = require('path').resolve('./foo.js');\nconsole.log('function in foo.js ran', __coverage__[fooFilename].f[1], 'times');\n// or you can generate detailed reports\n```\n\noutput\n\n    foo\n    foo\n    foo\n    function in foo.js ran 3 times\n\n[istanbul]: https://www.npmjs.com/package/istanbul\n\n### Mock user module during testing\n\nRequire a user module during the suite setup, then modify the module's exports in the `post` function.\nAny module loaded afterwards that requires the mocked module will get the mock value.\n\n```js\n// foo.js\nmodule.exports = function () { return 'foo'; }\n// foo-spec.js\ndescribe('mocking a module', function () {\n  require = require('really-need');\n  var foo;\n  beforeEach(function () {\n    foo = require('./foo', {\n      debug: true,\n      post: function (exported) {\n        // return anything you want.\n        return function mockFoo() {\n          return 'bar';\n        };\n      }\n    });\n  });\n  it('mocked foo returns \"bar\"', function () {\n    console.assert(foo() === 'bar', foo());\n  });\n  it.only('works even if some other module requires ./foo', function () {\n    require('./foo-returns-bar');\n  });\n});\n// foo-returns-bar.js\nvar foo = require('./foo');\nconsole.assert(foo() === 'bar', 'OMG, ./foo.js was mocked!');\n```\n\n### Inject values into the script on load\n\nAfter the source for the module has been loaded and transformed using `pre` function, the `Module` compiles\nit into the exported value. You can inject extra variables using `args` property. For example, we\ncan pass values to be added\n\n```js\n// sum.js\nmodule.exports = a + b;\n// index.js\nrequire = require('really-need');\nvar sum = require('./sum', {\n  args: {\n    a: 10,\n    b: 2\n  }\n});\nconsole.log(sum);\n// output 12\n```\n\nNotice that variables `a` and `b` are not declared in `sum.js`. Usually this means a `ReferenceError`, but\nwe are injecting values at load time. We could have done similar thing using `pre` callback, but using `args`\nis simpler and does not replace any existing source transformations.\n\nYou can even mess with built-in variables. When `Module` compiles the source, it wraps the loaded source\ninto a function call. Print the `module` object from Node REPL to see before / after text\n\n```js\nrequire('module');\nwrapper: \n [ '(function (exports, require, module, __filename, __dirname) { ',\n   '\\n});' ],\n```\nBecause we are appending `args` directly to the loaded source, they take precedence. Thus we can do things like\noverwriting `__filename`.\n\n```js\n// filename.js\nconsole.log('filename', __filename);\n// index.js\nrequire = require('really-need');\nrequire('./filename', {\n  args: {\n    __filename: 'hi there'\n  }\n});\n// prints filename hi there\n```\n\nWe can even disable all calls to `require` from the given script\n\n```js\n// another-require.js\nrequire('something');\n// index.js\nrequire = require('really-need');\nrequire('./another-require', {\n  args: {\n    require: function (name) {\n      console.log('no requires allowed');\n    }\n  }\n});\n// prints \"no requires allowed\"\n```\n\n### Determine if a module was really used\n\nRead the blog post [Was NodeJS module used](http://glebbahmutov.com/blog/was-nodejs-module-used/) \nand see the project [was-it-used](https://github.com/bahmutov/was-it-used).\n\n\n### How it works\n\nRead [Hacking Node require](http://glebbahmutov.com/blog/hacking-node-require/)\n\n\n### Small print\n\nAuthor: Gleb Bahmutov &copy; 2014\n\n* [@bahmutov](https://twitter.com/bahmutov)\n* [glebbahmutov.com](http://glebbahmutov.com)\n* [blog](http://glebbahmutov.com/blog)\n\nLicense: MIT - do anything with the code, but don't blame me if it does not work.\n\nSpread the word: tweet, star on github, etc.\n\nSupport: if you find any problems with this module, email / tweet /\n[open issue](https://github.com/bahmutov/really-need/issues) on Github\n\n\n\n## MIT License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Gleb Bahmutov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "really-need@1.6.3",
  "dist": {
    "shasum": "a9456c1b0857d17f54541fc242740bb526de5681"
  },
  "_from": "really-need@",
  "_resolved": "https://registry.npmjs.org/really-need/-/really-need-1.6.3.tgz"
}
